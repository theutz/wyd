// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) CreateClient(ctx context.Context, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient, name)
	var i Client
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, client_id)
VALUES (?, ?)
RETURNING id, name, client_id
`

type CreateProjectParams struct {
	Name     string
	ClientID int64
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.ClientID)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.ClientID)
	return i, err
}

const getClientByName = `-- name: GetClientByName :one
SELECT id, name
FROM clients
WHERE name LIKE ?
`

func (q *Queries) GetClientByName(ctx context.Context, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByName, name)
	var i Client
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, name from clients
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, client_id from projects
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name, &i.ClientID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
