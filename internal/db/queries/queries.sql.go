// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) CreateClient(ctx context.Context, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient, name)
	var i Client
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, client_id)
VALUES (?, ?)
RETURNING id, name, client_id
`

type CreateProjectParams struct {
	Name     string
	ClientID int64
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.ClientID)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.ClientID)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (name, project_id)
VALUES (?, ?)
RETURNING id, name, project_id
`

type CreateTaskParams struct {
	Name      string
	ProjectID int64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Name, arg.ProjectID)
	var i Task
	err := row.Scan(&i.ID, &i.Name, &i.ProjectID)
	return i, err
}

const getClientByName = `-- name: GetClientByName :one
SELECT id, name
FROM clients
WHERE name LIKE ?
`

func (q *Queries) GetClientByName(ctx context.Context, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByName, name)
	var i Client
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, name from clients
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT p.id, p.name, p.client_id, c.name AS client_name
FROM projects AS p
INNER JOIN clients AS c
ON c.id = p.client_id
`

type ListProjectsRow struct {
	ID         int64
	Name       string
	ClientID   int64
	ClientName string
}

func (q *Queries) ListProjects(ctx context.Context) ([]ListProjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProjectsRow
	for rows.Next() {
		var i ListProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientID,
			&i.ClientName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT t.name, p.name AS project_name
FROM tasks AS t
INNER JOIN projects AS p
on p.id = t.project_id
`

type ListTasksRow struct {
	Name        string
	ProjectName string
}

func (q *Queries) ListTasks(ctx context.Context) ([]ListTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTasksRow
	for rows.Next() {
		var i ListTasksRow
		if err := rows.Scan(&i.Name, &i.ProjectName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
