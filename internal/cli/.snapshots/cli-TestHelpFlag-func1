(*testing.T)({
  common: (testing.common) {
    mu: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (atomic.Int32) {
        _: (atomic.noCopy) {
        },
        v: (int32) 0
      },
      readerWait: (atomic.Int32) {
        _: (atomic.noCopy) {
        },
        v: (int32) 0
      }
    },
    output: ([]uint8) <nil>,
    w: (testing.indenter) {
      c: (*testing.common)(<already shown>)
    },
    ran: (bool) false,
    failed: (bool) false,
    skipped: (bool) false,
    done: (bool) false,
    helperPCs: (map[uintptr]struct {}) (len=1) {
      (uintptr) 0x102958f64: (struct {}) {
      }
    },
    helperNames: (map[string]struct {}) <nil>,
    cleanups: ([]func()) <nil>,
    cleanupName: (string) "",
    cleanupPc: ([]uintptr) <nil>,
    finished: (bool) false,
    inFuzzFn: (bool) false,
    chatty: (*testing.chattyPrinter)({
      w: (*os.File)({
        file: (*os.file)({
          pfd: (poll.FD) {
            fdmu: (poll.fdMutex) {
              state: (uint64) 0,
              rsema: (uint32) 0,
              wsema: (uint32) 0
            },
            Sysfd: (int) 1,
            SysFile: (poll.SysFile) {
              iovecs: (*[]syscall.Iovec)(<nil>)
            },
            pd: (poll.pollDesc) {
              runtimeCtx: (uintptr) <nil>
            },
            csema: (uint32) 0,
            isBlocking: (uint32) 1,
            IsStream: (bool) true,
            ZeroReadIsEOF: (bool) true,
            isFile: (bool) true
          },
          name: (string) (len=11) "/dev/stdout",
          dirinfo: (atomic.Pointer[os.dirInfo]) {
            _: ([0]*os.dirInfo) {
            },
            _: (atomic.noCopy) {
            },
            v: (unsafe.Pointer) <nil>
          },
          nonblock: (bool) false,
          stdoutOrErr: (bool) true,
          appendMode: (bool) false
        })
      }),
      lastNameMu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      lastName: (string) (len=17) "TestHelpFlag/long",
      json: (bool) false
    }),
    bench: (bool) false,
    hasSub: (atomic.Bool) {
      _: (atomic.noCopy) {
      },
      v: (uint32) 0
    },
    cleanupStarted: (atomic.Bool) {
      _: (atomic.noCopy) {
      },
      v: (uint32) 0
    },
    runner: (string) (len=15) "testing.tRunner",
    isParallel: (bool) false,
    parent: (*testing.common)({
      mu: (sync.RWMutex) {
        w: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        writerSem: (uint32) 0,
        readerSem: (uint32) 0,
        readerCount: (atomic.Int32) {
          _: (atomic.noCopy) {
          },
          v: (int32) 0
        },
        readerWait: (atomic.Int32) {
          _: (atomic.noCopy) {
          },
          v: (int32) 0
        }
      },
      output: ([]uint8) <nil>,
      w: (testing.indenter) {
        c: (*testing.common)(<already shown>)
      },
      ran: (bool) false,
      failed: (bool) false,
      skipped: (bool) false,
      done: (bool) false,
      helperPCs: (map[uintptr]struct {}) <nil>,
      helperNames: (map[string]struct {}) <nil>,
      cleanups: ([]func()) <nil>,
      cleanupName: (string) "",
      cleanupPc: ([]uintptr) <nil>,
      finished: (bool) false,
      inFuzzFn: (bool) false,
      chatty: (*testing.chattyPrinter)({
        w: (*os.File)({
          file: (*os.file)({
            pfd: (poll.FD) {
              fdmu: (poll.fdMutex) {
                state: (uint64) 0,
                rsema: (uint32) 0,
                wsema: (uint32) 0
              },
              Sysfd: (int) 1,
              SysFile: (poll.SysFile) {
                iovecs: (*[]syscall.Iovec)(<nil>)
              },
              pd: (poll.pollDesc) {
                runtimeCtx: (uintptr) <nil>
              },
              csema: (uint32) 0,
              isBlocking: (uint32) 1,
              IsStream: (bool) true,
              ZeroReadIsEOF: (bool) true,
              isFile: (bool) true
            },
            name: (string) (len=11) "/dev/stdout",
            dirinfo: (atomic.Pointer[os.dirInfo]) {
              _: ([0]*os.dirInfo) {
              },
              _: (atomic.noCopy) {
              },
              v: (unsafe.Pointer) <nil>
            },
            nonblock: (bool) false,
            stdoutOrErr: (bool) true,
            appendMode: (bool) false
          })
        }),
        lastNameMu: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        lastName: (string) (len=17) "TestHelpFlag/long",
        json: (bool) false
      }),
      bench: (bool) false,
      hasSub: (atomic.Bool) {
        _: (atomic.noCopy) {
        },
        v: (uint32) 1
      },
      cleanupStarted: (atomic.Bool) {
        _: (atomic.noCopy) {
        },
        v: (uint32) 0
      },
      runner: (string) (len=15) "testing.tRunner",
      isParallel: (bool) false,
      parent: (*testing.common)({
        mu: (sync.RWMutex) {
          w: (sync.Mutex) {
            state: (int32) 0,
            sema: (uint32) 0
          },
          writerSem: (uint32) 0,
          readerSem: (uint32) 0,
          readerCount: (atomic.Int32) {
            _: (atomic.noCopy) {
            },
            v: (int32) 0
          },
          readerWait: (atomic.Int32) {
            _: (atomic.noCopy) {
            },
            v: (int32) 0
          }
        },
        output: ([]uint8) <nil>,
        w: (*os.File)({
          file: (*os.file)({
            pfd: (poll.FD) {
              fdmu: (poll.fdMutex) {
                state: (uint64) 0,
                rsema: (uint32) 0,
                wsema: (uint32) 0
              },
              Sysfd: (int) 1,
              SysFile: (poll.SysFile) {
                iovecs: (*[]syscall.Iovec)(<nil>)
              },
              pd: (poll.pollDesc) {
                runtimeCtx: (uintptr) <nil>
              },
              csema: (uint32) 0,
              isBlocking: (uint32) 1,
              IsStream: (bool) true,
              ZeroReadIsEOF: (bool) true,
              isFile: (bool) true
            },
            name: (string) (len=11) "/dev/stdout",
            dirinfo: (atomic.Pointer[os.dirInfo]) {
              _: ([0]*os.dirInfo) {
              },
              _: (atomic.noCopy) {
              },
              v: (unsafe.Pointer) <nil>
            },
            nonblock: (bool) false,
            stdoutOrErr: (bool) true,
            appendMode: (bool) false
          })
        }),
        ran: (bool) false,
        failed: (bool) false,
        skipped: (bool) false,
        done: (bool) false,
        helperPCs: (map[uintptr]struct {}) <nil>,
        helperNames: (map[string]struct {}) <nil>,
        cleanups: ([]func()) <nil>,
        cleanupName: (string) "",
        cleanupPc: ([]uintptr) <nil>,
        finished: (bool) false,
        inFuzzFn: (bool) false,
        chatty: (*testing.chattyPrinter)({
          w: (*os.File)({
            file: (*os.file)({
              pfd: (poll.FD) {
                fdmu: (poll.fdMutex) {
                  state: (uint64) 0,
                  rsema: (uint32) 0,
                  wsema: (uint32) 0
                },
                Sysfd: (int) 1,
                SysFile: (poll.SysFile) {
                  iovecs: (*[]syscall.Iovec)(<nil>)
                },
                pd: (poll.pollDesc) {
                  runtimeCtx: (uintptr) <nil>
                },
                csema: (uint32) 0,
                isBlocking: (uint32) 1,
                IsStream: (bool) true,
                ZeroReadIsEOF: (bool) true,
                isFile: (bool) true
              },
              name: (string) (len=11) "/dev/stdout",
              dirinfo: (atomic.Pointer[os.dirInfo]) {
                _: ([0]*os.dirInfo) {
                },
                _: (atomic.noCopy) {
                },
                v: (unsafe.Pointer) <nil>
              },
              nonblock: (bool) false,
              stdoutOrErr: (bool) true,
              appendMode: (bool) false
            })
          }),
          lastNameMu: (sync.Mutex) {
            state: (int32) 0,
            sema: (uint32) 0
          },
          lastName: (string) (len=17) "TestHelpFlag/long",
          json: (bool) false
        }),
        bench: (bool) false,
        hasSub: (atomic.Bool) {
          _: (atomic.noCopy) {
          },
          v: (uint32) 1
        },
        cleanupStarted: (atomic.Bool) {
          _: (atomic.noCopy) {
          },
          v: (uint32) 0
        },
        runner: (string) (len=15) "testing.tRunner",
        isParallel: (bool) false,
        parent: (*testing.common)(<nil>),
        level: (int) 0,
        creator: ([]uintptr) <nil>,
        name: (string) "",
        start: (testing.highPrecisionTime) {
          now: (time.Time) 2024-09-14 00:15:32.196978 +0300 +03 m=+0.001968084
        },
        duration: (time.Duration) 0s,
        barrier: (chan bool) 0xc000198540,
        signal: (chan bool) 0xc0001984d0,
        sub: ([]*testing.T) <nil>,
        lastRaceErrors: (atomic.Int64) {
          _: (atomic.noCopy) {
          },
          _: (atomic.align64) {
          },
          v: (int64) 0
        },
        raceErrorLogged: (atomic.Bool) {
          _: (atomic.noCopy) {
          },
          v: (uint32) 0
        },
        tempDirMu: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        tempDir: (string) "",
        tempDirErr: (error) <nil>,
        tempDirSeq: (int32) 0
      }),
      level: (int) 1,
      creator: ([]uintptr) (len=7) {
        (uintptr) 0x10270f264,
        (uintptr) 0x10270a7d8,
        (uintptr) 0x10270f0f4,
        (uintptr) 0x10270cf38,
        (uintptr) 0x1029821b4,
        (uintptr) 0x1025ca958,
        (uintptr) 0x10260cc54
      },
      name: (string) (len=12) "TestHelpFlag",
      start: (testing.highPrecisionTime) {
        now: (time.Time) 2024-09-14 00:15:32.197094 +0300 +03 m=+0.002084626
      },
      duration: (time.Duration) 0s,
      barrier: (chan bool) 0xc0001985b0,
      signal: (chan bool) 0xc000198620,
      sub: ([]*testing.T) <nil>,
      lastRaceErrors: (atomic.Int64) {
        _: (atomic.noCopy) {
        },
        _: (atomic.align64) {
        },
        v: (int64) 0
      },
      raceErrorLogged: (atomic.Bool) {
        _: (atomic.noCopy) {
        },
        v: (uint32) 0
      },
      tempDirMu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      tempDir: (string) "",
      tempDirErr: (error) <nil>,
      tempDirSeq: (int32) 0
    }),
    level: (int) 2,
    creator: ([]uintptr) (len=3) {
      (uintptr) 0x10297f544,
      (uintptr) 0x10270a7d8,
      (uintptr) 0x10260cc54
    },
    name: (string) (len=17) "TestHelpFlag/long",
    start: (testing.highPrecisionTime) {
      now: (time.Time) 2024-09-14 00:15:32.197192 +0300 +03 m=+0.002182667
    },
    duration: (time.Duration) 0s,
    barrier: (chan bool) 0xc000198690,
    signal: (chan bool) 0xc000198700,
    sub: ([]*testing.T) <nil>,
    lastRaceErrors: (atomic.Int64) {
      _: (atomic.noCopy) {
      },
      _: (atomic.align64) {
      },
      v: (int64) 0
    },
    raceErrorLogged: (atomic.Bool) {
      _: (atomic.noCopy) {
      },
      v: (uint32) 0
    },
    tempDirMu: (sync.Mutex) {
      state: (int32) 0,
      sema: (uint32) 0
    },
    tempDir: (string) "",
    tempDirErr: (error) <nil>,
    tempDirSeq: (int32) 0
  },
  isEnvSet: (bool) false,
  context: (*testing.testContext)({
    match: (*testing.matcher)({
      filter: (testing.simpleMatch) (len=1) {
        (string) (len=57) "^(^TestHelpFlag$|^TestDebugFlag$|^TestDatabasePathFlag$)$"
      },
      skip: (testing.alternationMatch) {
      },
      matchFunc: (func(string, string) (bool, error)) 0x1027128c0,
      mu: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      subNames: (map[string]int32) (len=1) {
        (string) (len=17) "TestHelpFlag/long": (int32) 1
      }
    }),
    deadline: (time.Time) 2024-09-14 00:25:32.196834 +0300 +03 m=+600.001824876,
    isFuzzing: (bool) false,
    mu: (sync.Mutex) {
      state: (int32) 0,
      sema: (uint32) 0
    },
    startParallel: (chan bool) 0xc000198460,
    running: (int) 1,
    numWaiting: (int) 0,
    maxParallel: (int) 12
  })
})
Usage: wyd <command> [flags]a program to ask you what you're doingFlags:  -h, --help                    Show context-sensitive help.  -v, --verbose                 enable verbose logging  -d, --database-path=STRING    where to store the databaseCommands:  clients (client,c) add (a) --name=STRING    add a client  clients (client,c) list    list all clients  clients (client,c) delete (d) --name=STRING --id=INT-64    delete a client  projects (project,p) add (a) [flags]    add a project  projects (project,p) list [flags]    list all projects  projects (project,p) delete (d) --name=STRING --id=INT-64    delete a project  tasks (task,t) add --name=STRING --project=STRING    add a task  tasks (task,t) list [flags]    list all tasks  tasks (task,t) delete --name=STRING --id=INT-64    delete a taskRun "wyd <command> --help" for more information on a command.
